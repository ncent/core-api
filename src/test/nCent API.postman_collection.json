{
	"info": {
		"name": "nCent API",
		"_postman_id": "31c709d0-5ed0-28af-17ba-29990102196f",
		"description": "This collection is a series of tests to confirm the health of the production nCent API environment. All tests are end-to-end integration tests.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "publicKey",
			"description": "This folder contains all of the requests that go out to the publicKeys Controller: https://github.com/ncent/ncent-api-v2/blob/master/src/main/controllers/publicKeyController.kt",
			"item": [
				{
					"name": "publicKey create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9039c781-80ab-43c4-8723-083c523f0f47",
								"type": "text/javascript",
								"exec": [
									"const email = \"dev136@ncnt.io\";",
									"pm.environment.set(\"testUserEmail\", email);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "464379cc-4335-4f97-a377-dd45586df4c6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"testUser\", pm.response.json().value);",
									"pm.environment.set(\"testUserId\", pm.response.json().value.id);",
									"pm.environment.set(\"apiKey\", pm.response.json().value.apiCreds.apiKey);",
									"pm.environment.set(\"secretKey\", pm.response.json().secretKey);",
									"pm.environment.set(\"publicKey1\", pm.response.json().value.cryptoKeyPair.publicKey);",
									"",
									"const apiKey = pm.response.json().value.apiCreds.apiKey;",
									"const secretKey = pm.response.json().secretKey;",
									"const encodedApiKeyAndSecret = btoa(`${apiKey}:${secretKey}`);",
									"pm.environment.set(\"encodedApiKeyAndSecret\", encodedApiKeyAndSecret); ",
									"",
									"const testUserEmail = pm.environment.get(\"testUserEmail\");",
									"",
									"pm.test(\"User created with correct metadata\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value.userMetadata.email).to.eql(testUserEmail);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{testUserEmail}}\",\n  \"firstname\": \"nCent\",\n  \"lastname\": \"Labs\"\n}"
						},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/user",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"user"
							]
						},
						"description": "retrieve the data of a single user"
					},
					"response": []
				},
				{
					"name": "publicKey findOne",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd9e9744-3bf9-4799-b129-336f3f810741",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c093d67e-a241-43fe-99ba-20422c696349",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const testUserEmail = pm.environment.get(\"testUserEmail\");",
									"",
									"pm.test(\"Correct user retrieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userMetadata.email).to.eql(testUserEmail);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/user?userId={{testUserId}}&id={{testUserId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"user"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{testUserId}}"
								},
								{
									"key": "id",
									"value": "{{testUserId}}"
								}
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "publicKey create 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "10889a99-ee81-4472-9082-ad2ff1235c40",
								"type": "text/javascript",
								"exec": [
									"const email = \"dev436@ncnt.io\";",
									"pm.environment.set(\"testUserEmail2\", email);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f185ab65-bfb6-4b22-b891-4166af48a137",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"testkey2\", pm.response.json().value);",
									"pm.environment.set(\"testUserId2\", pm.response.json().value.id);",
									"pm.environment.set(\"publicKey2\", pm.response.json().value.cryptoKeyPair.publicKey)",
									"const apiKey = pm.response.json().value.apiCreds.apiKey;",
									"const secretKey = pm.response.json().secretKey;",
									"const encodedApiKeyAndSecret = btoa(`${apiKey}:${secretKey}`);",
									"pm.environment.set(\"encodedApiKeyAndSecret2\", encodedApiKeyAndSecret); "
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{testUserEmail2}}\",\n  \"firstname\": \"nCent\",\n  \"lastname\": \"Labs\"\n}"
						},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/user",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"user"
							]
						},
						"description": null
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "40c8f118-60cb-452a-8bac-a96d24f6f7a2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "192eb675-b579-488b-925b-b5b9bf76358a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Challenge",
			"description": "This folder contains the saved requests that will be made to APIs present in the Challenge Controller: https://github.com/ncent/ncent-api-v2/blob/master/src/main/controllers/ChallengeController.kt",
			"item": [
				{
					"name": "Challenge create offChain",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6209104c-92b8-435a-934f-a29f22f73ee8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f9fcc2cc-3fdb-4c4f-a652-9897b948c1e5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.environment.set(\"testChallenge\", pm.response.json());",
									"pm.environment.set(\"testChallengeId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"challengeNamespace\": {\n    \"challengeSettings\": {\n      \"admin\" : {{testUserId}}, \n      \"description\" : \"nCent Senior Engineer\", \n      \"expiration\" : \"2020-02-02T00:35:01.441Z\", \n      \"imageUrl\" : \"\", \n      \"maxShares\" : 10, \n      \"name\" : \"nCent Senior Engineer\", \n      \"offChain\" : true, \n      \"shareExpiration\" : \"2020-02-02T00:35:01.441Z\", \n      \"sponsorName\" : \"nCent Labs\",\n      \"metadatas\": [{\n        \"key\": \"jobDetails\",\n        \"value\": \"{\\\"company\\\": {\\\"name\\\": \\\"nCent Labs\\\",\\\"iconUrl\\\": \\\"https://ncent.io/Applications/landingPage/img/ncent_NOsubline_500px_white.png\\\",\\\"shareText\\\": \\\"SHARE this job, get upto $4k reward if ANYONE in your network (or network's network(s)) finds the hire!\\\",\\\"applyText\\\": \\\"\\\",\\\"totalUsdReward\\\": \\\"8000.00\\\",\\\"jobsUrl\\\": \\\"\\\",\\\"jobTitle\\\": \\\"Senior Software Engineer\\\",\\\"location\\\": \\\"Remote - Global\\\",\\\"description\\\": \\\"nCent Labs is a Stanford / Google / MIT PhD-led blockchain startup backed by Sequoia, SV Angel, Winklevoss Capital, MetaStable, Naval Ravikant, Steve Jurvetson, and others. We have a bold mission to create a freer and fairer decentralized internet where the users directly benefit from the network effects they create and own. To do this, we are launching a novel new blockchain that has viral incentives built into the protocol. We have a fast-paced culture and are focused on shipping robust code. \\n We're looking for mindful, empathetic, and self-aware engineers to join our team to help us move thinking forward. With a strong focus on growth and personal development, Medium is the ideal place to develop your skills in an environment that is built on mutual trust and respect.\\\",\\\"list\\\": [],\\\"benefits\\\": {\\\"title\\\": \\\"Benefits\\\",\\\"description\\\": \\\"nCent is a fast-paced early stage startup that offers you the chance to build a leading company. All positions at nCent are remote. nCent offers competitive salary and generous token / equity grants. We welcome qualified applicants of all backgrounds.\\\",\\\"list\\\": []}},\\\"subJobs\\\": [{\\\"title\\\": \\\"Backend\\\",\\\"responsibilities\\\": {\\\"title\\\": \\\"Responsibilities\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"Work with engineers, and senior executives to execute on turning our vision into a tangible roadmap every quarter\\\",\\\"Build, test, and release product-facing features with stringent correctness and scalability requirements\\\",\\\"Build API's and middleware applications that are highly available and performant for any type of front end application\\\",\\\"Design, implement, test and maintain backend components: application, data, infrastructure, analytics and deployment\\\",\\\"Contribute to open source projects\\\",\\\"Consistently improve maintainability and stability of the codebase\\\"]},\\\"requirements\\\": {\\\"title\\\": \\\"Requirements\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"You have at least 4 years of experience in software engineering\\\",\\\"You have the ability to work both independently from start to finish on a project and with a distributed team\\\",\\\"You've designed, built, scaled and maintained production services, and know how to compose a service oriented architecture\\\",\\\"Expertise in Java or similar language (such as Kotlin or C++)\\\",\\\"You write high quality, well tested and documented code to meet the needs of your customers\\\",\\\"Real passion for agile, test-driven development, continuous integration and automated testing\\\",\\\"You know what high quality code — and software engineering processes — look like and know how to foster an environment that creates them\\\",\\\"You respectfully challenge your peers, and welcome being challenged\\\",\\\"You are passionate about learning, and want to help us learn too\\\"]},\\\"niceToHave\\\": {\\\"title\\\": \\\"Nice to Have\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"Experience working remotely\\\",\\\"Experience with AWS (Lambda, EC2, API Gateway, RDS)\\\",\\\"Experience working in a service-oriented or microservice architecture\\\",\\\"You have deep knowledge of API design principles and best-practices, caching, resiliency, RPC, REST, and HTTP\\\",\\\"Experience with Serverless apps\\\",\\\"Some understanding of the in's and out's of the blockchain community and mission for the ecosystem\\\",\\\"Some understanding of the problems that currently exist in our space\\\"]}},{\\\"title\\\": \\\"Full Stack\\\",\\\"responsibilities\\\": {\\\"title\\\": \\\"Responsibilities\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"Build full stack applications that leverage recursive incentives to solve otherwise impossible problems\\\",\\\"Work with engineers, and senior executives to execute on turning our vision into a tangible roadmap every quarter\\\",\\\"Architect and build product features from the database all the way to the UI\\\",\\\"Collaborate closely with colleagues and bring innovative and delightful designs to life; you'll have freedom to shape the look and feel\\\",\\\"Contribute to open source projects\\\",\\\"Consistently improve maintainability and stability of the codebase\\\"]},\\\"requirements\\\": {\\\"title\\\": \\\"Requirements\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"You have at least 4 years of experience in software engineering\\\",\\\"You enjoy being a generalist, with a willingness to work on both frontend and backend\\\",\\\"You have experience in programming and interacting with APIs\\\",\\\"You have experience building single page web applications\\\",\\\"Expertise in Java or similar language (such as Kotlin or C++)\\\",\\\"Expertise in Javascript, NodeJS, React\\\"\\\"You write high quality, well tested and documented code to meet the needs of your customers\\\",\\\"You have the ability to work both independently from start to finish on a project and with a distributed team\\\",\\\"Real passion for agile, test-driven development, continuous integration and automated testing\\\",\\\"You know what high quality code — and software engineering processes — look like and know how to foster an environment that creates them\\\",\\\"You respectfully challenge your peers, and welcome being challenged\\\",\\\"You are passionate about learning, and want to help us learn too\\\"]},\\\"niceToHave\\\": {\\\"title\\\": \\\"Nice to Have\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"Experience working remotely\\\",\\\"Experience with AWS (Lambda, EC2, API Gateway, RDS)\\\",\\\"Experience working in a service-oriented or microservice architecture\\\",\\\"You have deep knowledge of API design principles and best-practices, caching, resiliency, RPC, REST, and HTTP\\\",\\\"Experience building mobile applications (native and cross platform)\\\",\\\"Some understanding of the in's and out's of the blockchain community and mission for the ecosystem\\\",\\\"Some understanding of the problems that currently exist in our space\\\"]}}]}\"\n      }]\n    }, \n    \"completionCriteria\": {\n      \"address\" : \"{{publicKey1}}\", \n      \"prereq\" : [], \n      \"reward\" : {\n        \"type\": {\n          \"audience\": \"PROVIDENCE\", \n          \"type\" : \"N_OVER_2\"\n        }\n      }\n    }, \n    \"distributionFeeReward\": {\n      \"type\": {\n        \"audience\": \"PROVIDENCE\", \n        \"type\" : \"SINGLE\"\n      }\n    }, \n    \"subChallenges\" : []\n  }\n}"
						},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenge?userId={{testUserId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"challenge"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{testUserId}}",
									"equals": true
								}
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "Challenge create onChain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0934123-d02c-40a6-b9aa-cb1ad4fc43b5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.environment.set(\"testChallengeOC\", pm.response.json());",
									"pm.environment.set(\"testChallengeOCId\", pm.response.json().id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"challengeNamespace\": {\n    \"challengeSettings\": {\n      \"admin\" : {{testUserId}}, \n      \"description\" : \"nCent Senior Engineer\", \n      \"expiration\" : \"2020-02-02T00:35:01.441Z\", \n      \"imageUrl\" : \"\", \n      \"maxShares\" : 10, \n      \"name\" : \"nCent Senior Engineer\", \n      \"offChain\" : false, \n      \"shareExpiration\" : \"2020-02-02T00:35:01.441Z\", \n      \"sponsorName\" : \"nCent Labs\",\n      \"metadatas\": [{\n        \"key\": \"jobDetails\",\n        \"value\": \"{\\\"company\\\": {\\\"name\\\": \\\"nCent Labs\\\",\\\"iconUrl\\\": \\\"https://ncent.io/Applications/landingPage/img/ncent_NOsubline_500px_white.png\\\",\\\"shareText\\\": \\\"SHARE this job, get upto $4k reward if ANYONE in your network (or network's network(s)) finds the hire!\\\",\\\"applyText\\\": \\\"\\\",\\\"totalUsdReward\\\": \\\"8000.00\\\",\\\"jobsUrl\\\": \\\"\\\",\\\"jobTitle\\\": \\\"Senior Software Engineer\\\",\\\"location\\\": \\\"Remote - Global\\\",\\\"description\\\": \\\"nCent Labs is a Stanford / Google / MIT PhD-led blockchain startup backed by Sequoia, SV Angel, Winklevoss Capital, MetaStable, Naval Ravikant, Steve Jurvetson, and others. We have a bold mission to create a freer and fairer decentralized internet where the users directly benefit from the network effects they create and own. To do this, we are launching a novel new blockchain that has viral incentives built into the protocol. We have a fast-paced culture and are focused on shipping robust code. \\n We're looking for mindful, empathetic, and self-aware engineers to join our team to help us move thinking forward. With a strong focus on growth and personal development, Medium is the ideal place to develop your skills in an environment that is built on mutual trust and respect.\\\",\\\"list\\\": [],\\\"benefits\\\": {\\\"title\\\": \\\"Benefits\\\",\\\"description\\\": \\\"nCent is a fast-paced early stage startup that offers you the chance to build a leading company. All positions at nCent are remote. nCent offers competitive salary and generous token / equity grants. We welcome qualified applicants of all backgrounds.\\\",\\\"list\\\": []}},\\\"subJobs\\\": [{\\\"title\\\": \\\"Backend\\\",\\\"responsibilities\\\": {\\\"title\\\": \\\"Responsibilities\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"Work with engineers, and senior executives to execute on turning our vision into a tangible roadmap every quarter\\\",\\\"Build, test, and release product-facing features with stringent correctness and scalability requirements\\\",\\\"Build API's and middleware applications that are highly available and performant for any type of front end application\\\",\\\"Design, implement, test and maintain backend components: application, data, infrastructure, analytics and deployment\\\",\\\"Contribute to open source projects\\\",\\\"Consistently improve maintainability and stability of the codebase\\\"]},\\\"requirements\\\": {\\\"title\\\": \\\"Requirements\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"You have at least 4 years of experience in software engineering\\\",\\\"You have the ability to work both independently from start to finish on a project and with a distributed team\\\",\\\"You've designed, built, scaled and maintained production services, and know how to compose a service oriented architecture\\\",\\\"Expertise in Java or similar language (such as Kotlin or C++)\\\",\\\"You write high quality, well tested and documented code to meet the needs of your customers\\\",\\\"Real passion for agile, test-driven development, continuous integration and automated testing\\\",\\\"You know what high quality code — and software engineering processes — look like and know how to foster an environment that creates them\\\",\\\"You respectfully challenge your peers, and welcome being challenged\\\",\\\"You are passionate about learning, and want to help us learn too\\\"]},\\\"niceToHave\\\": {\\\"title\\\": \\\"Nice to Have\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"Experience working remotely\\\",\\\"Experience with AWS (Lambda, EC2, API Gateway, RDS)\\\",\\\"Experience working in a service-oriented or microservice architecture\\\",\\\"You have deep knowledge of API design principles and best-practices, caching, resiliency, RPC, REST, and HTTP\\\",\\\"Experience with Serverless apps\\\",\\\"Some understanding of the in's and out's of the blockchain community and mission for the ecosystem\\\",\\\"Some understanding of the problems that currently exist in our space\\\"]}},{\\\"title\\\": \\\"Full Stack\\\",\\\"responsibilities\\\": {\\\"title\\\": \\\"Responsibilities\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"Build full stack applications that leverage recursive incentives to solve otherwise impossible problems\\\",\\\"Work with engineers, and senior executives to execute on turning our vision into a tangible roadmap every quarter\\\",\\\"Architect and build product features from the database all the way to the UI\\\",\\\"Collaborate closely with colleagues and bring innovative and delightful designs to life; you'll have freedom to shape the look and feel\\\",\\\"Contribute to open source projects\\\",\\\"Consistently improve maintainability and stability of the codebase\\\"]},\\\"requirements\\\": {\\\"title\\\": \\\"Requirements\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"You have at least 4 years of experience in software engineering\\\",\\\"You enjoy being a generalist, with a willingness to work on both frontend and backend\\\",\\\"You have experience in programming and interacting with APIs\\\",\\\"You have experience building single page web applications\\\",\\\"Expertise in Java or similar language (such as Kotlin or C++)\\\",\\\"Expertise in Javascript, NodeJS, React\\\"\\\"You write high quality, well tested and documented code to meet the needs of your customers\\\",\\\"You have the ability to work both independently from start to finish on a project and with a distributed team\\\",\\\"Real passion for agile, test-driven development, continuous integration and automated testing\\\",\\\"You know what high quality code — and software engineering processes — look like and know how to foster an environment that creates them\\\",\\\"You respectfully challenge your peers, and welcome being challenged\\\",\\\"You are passionate about learning, and want to help us learn too\\\"]},\\\"niceToHave\\\": {\\\"title\\\": \\\"Nice to Have\\\",\\\"description\\\": \\\"\\\",\\\"list\\\": [\\\"Experience working remotely\\\",\\\"Experience with AWS (Lambda, EC2, API Gateway, RDS)\\\",\\\"Experience working in a service-oriented or microservice architecture\\\",\\\"You have deep knowledge of API design principles and best-practices, caching, resiliency, RPC, REST, and HTTP\\\",\\\"Experience building mobile applications (native and cross platform)\\\",\\\"Some understanding of the in's and out's of the blockchain community and mission for the ecosystem\\\",\\\"Some understanding of the problems that currently exist in our space\\\"]}}]}\"\n      }]\n    }, \n    \"completionCriteria\": {\n      \"address\" : \"{{publicKey1}}\", \n      \"prereq\" : [], \n      \"reward\" : {\n        \"type\": {\n          \"audience\": \"PROVIDENCE\", \n          \"type\" : \"N_OVER_2\"\n        }\n      }\n    }, \n    \"distributionFeeReward\": {\n      \"type\": {\n        \"audience\": \"PROVIDENCE\", \n        \"type\" : \"SINGLE\"\n      }\n    }, \n    \"subChallenges\" : []\n  }\n}"
						},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenge?userId={{testUserId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"challenge"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{testUserId}}",
									"equals": true
								}
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "Challenge findOne offChain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bbcfa28-8fd7-4c91-ba3f-0ad510204ef7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const testChallengeId = pm.environment.get(\"testChallengeId\");",
									"",
									"pm.test(\"Returns proper challenge by Id\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(testChallengeId);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}"
							}
						],
						"body": {},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenge?id={{testChallengeId}}&userId={{testUserId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"challenge"
							],
							"query": [
								{
									"key": "id",
									"value": "{{testChallengeId}}",
									"equals": true
								},
								{
									"key": "userId",
									"value": "{{testUserId}}",
									"equals": true
								}
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "Challenge findOne onChain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27e697bd-ce3f-4e65-ab2b-b1458c2e1510",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const testChallengeId = pm.environment.get(\"testChallengeOCId\");",
									"",
									"pm.test(\"Returns proper challenge by Id\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(testChallengeId);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}"
							}
						],
						"body": {},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenge?id={{testChallengeOCId}}&userId={{testUserId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"challenge"
							],
							"query": [
								{
									"key": "id",
									"value": "{{testChallengeOCId}}",
									"equals": true
								},
								{
									"key": "userId",
									"value": "{{testUserId}}",
									"equals": true
								}
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "FindAll Challenges",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb6153de-472e-4a09-b396-0126f24b2a68",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}"
							}
						],
						"body": {},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenges?userId={{testUserId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"challenges"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{testUserId}}",
									"equals": true
								}
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "Activate Challenge onChain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b83d8412-464a-4806-bb87-8c3e9513122c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"challengeId\": {{testChallengeOCId}}\n}"
						},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenge/activate?userId={{testUserId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"challenge",
								"activate"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{testUserId}}",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Active Challenge offChain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebf2e099-55bc-47c4-bdf1-c04986c98f55",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"challengeId\": {{testChallengeId}}\n}"
						},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenge/activate?userId={{testUserId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"challenge",
								"activate"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{testUserId}}",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Challenge share onChain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6af111ef-1e77-4897-b73f-94f8b1566d3b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"challengeId\": \"{{testChallengeOCId}}\",\n  \"shares\": 1,\n  \"emailToShareWith\": \"{{testUserEmail2}}\"\n}"
						},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenge/share?userId={{testUserId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"challenge",
								"share"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{testUserId}}",
									"equals": true
								}
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "Challenge share offChain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d9a389e-0cdd-40c2-a73d-5baedf9f1306",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"challengeId\": \"{{testChallengeId}}\",\n  \"shares\": 1,\n  \"emailToShareWith\": \"{{testUserEmail2}}\"\n}"
						},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenge/share?userId={{testUserId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"challenge",
								"share"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{testUserId}}",
									"equals": true
								}
							]
						},
						"description": null
					},
					"response": []
				}
			]
		},
		{
			"name": "Balances",
			"description": "",
			"item": [
				{
					"name": "FindAllBalancesForUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c5676d3-fa50-4d7d-bb49-5ebc77088dda",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/user/balances?userId={{testUserId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"user",
								"balances"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{testUserId}}",
									"equals": true
								}
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "FindAllBalancesForChallenge",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb1e0b0f-d58a-4147-9cf9-0c700570105c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{encodedApiKeyAndSecret}}"
							}
						],
						"body": {},
						"url": {
							"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenge/balances?userId={{testUserId}}&challengeId={{testChallengeId}}",
							"protocol": "https",
							"host": [
								"us8t47w3me",
								"execute-api",
								"us-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"development",
								"challenge",
								"balances"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{testUserId}}",
									"equals": true
								},
								{
									"key": "challengeId",
									"value": "{{testChallengeId}}",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Complete Challenge offChain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ea012e31-6437-40c0-8b02-d01938308d69",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{encodedApiKeyAndSecret}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"challengeId\": {{testChallengeId}},\n  \"completerPublicKey\": \"{{publicKey2}}\"\n}"
				},
				"url": {
					"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenge/complete?userId={{testUserId}}",
					"protocol": "https",
					"host": [
						"us8t47w3me",
						"execute-api",
						"us-west-1",
						"amazonaws",
						"com"
					],
					"path": [
						"development",
						"challenge",
						"complete"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{testUserId}}",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Complete Challenge onChain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5eb1fb0b-1243-4fb9-bbb3-d36cc14f89cc",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{encodedApiKeyAndSecret}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"challengeId\": {{testChallengeOCId}},\n  \"completerPublicKey\": \"{{publicKey2}}\"\n}"
				},
				"url": {
					"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/challenge/complete?userId={{testUserId}}",
					"protocol": "https",
					"host": [
						"us8t47w3me",
						"execute-api",
						"us-west-1",
						"amazonaws",
						"com"
					],
					"path": [
						"development",
						"challenge",
						"complete"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{testUserId}}",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "publicKey delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "61b2daab-9d14-4bf9-b66a-3b81fb4a8919",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{encodedApiKeyAndSecret}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/user?userId={{testUserId}}",
					"protocol": "https",
					"host": [
						"us8t47w3me",
						"execute-api",
						"us-west-1",
						"amazonaws",
						"com"
					],
					"path": [
						"development",
						"user"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{testUserId}}",
							"equals": true
						}
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "publicKey delete 2",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{encodedApiKeyAndSecret2}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://us8t47w3me.execute-api.us-west-1.amazonaws.com/development/user?userId={{testUserId2}}",
					"protocol": "https",
					"host": [
						"us8t47w3me",
						"execute-api",
						"us-west-1",
						"amazonaws",
						"com"
					],
					"path": [
						"development",
						"user"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{testUserId2}}",
							"equals": true
						}
					]
				},
				"description": null
			},
			"response": []
		}
	]
}